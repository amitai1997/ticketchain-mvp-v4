---
description:
globs:
alwaysApply: true
---
**Module Purpose & Cohesion**

* Give each module single, clear responsibility.
* Keep related functions and classes within same module.
* Limit exported symbols to the minimal public interface.
* Avoid circular dependencies; refactor shared logic upstream.
* Document module intent and invariants in top‑level docstring.

**File Length & Granularity**

* Limit source files to roughly 400 lines max.
* Split oversized files by responsibility boundaries.
* Extract inner classes to separate files when public.
* Co‑locate small, tightly coupled helpers with callers.
* Keep tests in matching file tree with concise files.

**Naming & Structure**

* Use descriptive, lowercase file names with underscores.
* Mirror package structure to domain language hierarchy.
* Append `_utils` only for generic helpers.
* Prefix experimental modules with `_draft` to flag instability.

**Architecture & Design**

* Modularize features into cohesive, loosely coupled components.
* Define shared abstractions early to prevent divergent implementations.
* Enforce single source of truth for configuration and constants.
* Prefer composition and parameterization over copy‑paste inheritance.
* Split domain layers (API, service, data, infra) into dedicated packages.
* Keep public APIs stable; hide internal helpers behind module‑private namespaces.
* Model business concepts explicitly; avoid anemic data‑only modules.
* Place cross‑cutting concerns (logging, metrics) in separate modules.
* Isolate third‑party integrations behind adapters to shield vendor changes.
* Favor functional purity in utility modules for easier reuse and testing.
* Establish clear module dependency direction; lower layers never import upward.
* Use interfaces or abstract base classes to invert dependencies when required.
* Validate layering rules with static analysis in CI.

**Dependency Management**

* Import only what you use; avoid wildcard imports.
* Prefer dependency injection over global imports.
* Group standard, third‑party, and local imports separately.
* Lock binary plugin versions to maintain ABI stability.
* Validate module graph with static analyzer in CI.

**Maintenance & Refactoring**

* Refactor duplicated logic into shared libraries promptly.
* Review file size and complexity metrics each sprint.
* Include deprecation notices in module docstring when moving APIs.
* Archive deprecated modules under `/legacy` with clear warnings.
* Update import paths after refactor using codemod tools.
