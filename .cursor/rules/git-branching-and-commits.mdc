---
description:
globs:
alwaysApply: true
---
**Branching Strategy**
* Use `main` as the production branch.
* Create feature branches from the latest `main`.
* Prefix branches with type, e.g., `feature/`, `bugfix/`, `hotfix/`, `release/`.
* Keep branches focused—one logical change per branch.
* Regularly pull latest `main` into feature branches to prevent drift.
* Delete merged branches to keep the repository clean.

**Commit Practices**
* Make atomic commits—each should represent one logical change.
* Write clear, imperative commit messages (e.g., “Fix login redirect bug”).
* Limit subject lines to 50 characters; add body if context is needed.
* Use present tense in commit messages ("Add", not "Added").
* Include issue/ticket number if applicable (e.g., `#123`).

**Rebasing & Merging**
* Use `rebase` for clean history before merging into `main`.
* Prefer `merge --no-ff` for preserving branch context in team projects.
* Always resolve conflicts before pushing rebased branches.

**Code Review & Collaboration**
* Open pull requests early for visibility and feedback.
* Ensure commits are linted and tested before opening a PR.
* Squash commits before merging if history clarity is desired.
* Use draft PRs for work-in-progress to signal early collaboration.

**Best Practices**
* Never commit directly to `main` or `production` branches.
* Don’t include unrelated changes in a single commit.
* Use `.gitignore` to exclude local config and secrets.
* Run `git status` before committing to double-check staged changes.
* Review commit history with `git log --oneline` to verify clarity.
