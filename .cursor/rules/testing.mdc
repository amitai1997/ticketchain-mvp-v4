---
description:
globs:
alwaysApply: true
---
# Cursor Rules – Testing

**Strategy & Planning**

* Start testing during requirements to catch defects early.
* Use risk analysis to prioritize test scope.
* Keep a living test strategy updated each release.

**Unit Testing**

* Apply Arrange‑Act‑Assert for clear test structure.
* Isolate units by mocking external dependencies.
* Assert behavior, not implementation details, for resilience.
* Fail fast, deterministic tests run under any environment.

**Integration & End‑to‑End**

* Provision reproducible test environments using containers and IaC.
* Contract‑test service boundaries to detect breaking changes.
* Limit end‑to‑end suites to critical user journeys.
* Write e2e tests only where and when needed.
* Use masked or synthetic data for privacy compliance.

**Automation & CI/CD**

* Execute automated tests on every commit in CI.
* Parallelize suites to keep pipeline feedback under ten minutes.
* Tag and quarantine flaky tests immediately for repair.
* Collect coverage and trend metrics to guide improvement.

**Quality & Maintenance**

* Embed performance, load, and security checks in pipelines.
* Version‑control test code, data, and infrastructure together.
* Refactor test suites regularly to remove duplication.
* Review failing patterns to strengthen reliability and resilience.
* Update and expand existing tests whenever significant code or API changes are introduced to keep coverage accurate.
* Run the full test suite locally (or the relevant subset) after adding or modifying code to catch regressions before committing.
