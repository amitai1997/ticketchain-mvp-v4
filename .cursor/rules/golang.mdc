---
description:
globs:
alwaysApply: false
---
Cursor Rules – Go Language

Syntax & Style
	•	Always run gofmt and goimports; commit formatted code only.
	•	Keep functions under 40 lines for readability.
	•	Name packages with short, lowercase, no underscores.
	•	Return early to reduce nesting; avoid deep indentation.
	•	Place variable declarations close to first use.
Concurrency: Goroutines & Channels
	•	Launch goroutines only when concurrent benefit outweighs overhead.
	•	Use context.Context for cancellation and deadlines across goroutines.
	•	Prefer unbuffered channels for sync; buffered for pipelines.
	•	Close channels from sender side after final write.
	•	Avoid sharing memory; communicate via channels for coordination.

Structs & Methods
	•	Use pointer receivers when modifying or copying large structs.
	•	Embed small structs to achieve composition over inheritance.
	•	Tag exported fields with JSON annotations for API clarity.
	•	Keep struct fields lowercase unless external access required.

Error Handling
	•	Return explicit errors; never silence or ignore them.
	•	Wrap errors with %w to preserve stack context.
	•	Avoid panics except for programmer errors or unrecoverable states.
	•	Provide sentinel errors for predictable branch decisions.

Performance & Memory
	•	Preallocate slices with make when size known.
	•	Use sync.Pool sparingly for short-lived object reuse.
	•	Benchmark critical paths using go test -bench.
	•	Profile CPU/heap with pprof before optimization.

Tooling & Build
	•	Manage dependencies with Go modules; commit go.sum.
	•	Run go vet and staticcheck in CI pipeline.
	•	Use go test -race to detect data races in concurrency.
