name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # Solidity Tests
  solidity-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Compile contracts
        run: npx hardhat compile

      - name: Run tests
        run: npx hardhat test

  # Python Tests
  python-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry (with fallback)
        shell: bash
        run: |
          set -e
          echo "Attempting to install Poetry..."

          # Try pip install first (more reliable in CI)
          if pip install poetry==1.8.3; then
            echo "Poetry installed successfully via pip"
          else
            echo "Pip install failed, trying official installer..."
            curl -sSL https://install.python-poetry.org | python3 -
            echo "$HOME/.local/bin" >> $GITHUB_PATH
          fi

          # Verify and configure
          poetry --version
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Run linting
        run: |
          poetry run ruff check src tests
          poetry run black --check src tests

      - name: Run type checking
        run: poetry run mypy src

      - name: Run tests
        run: poetry run pytest tests/unit --cov=src

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [solidity-tests, python-tests]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry (with fallback)
        shell: bash
        run: |
          set -e
          echo "Attempting to install Poetry..."

          # Try pip install first (more reliable in CI)
          if pip install poetry==1.8.3; then
            echo "Poetry installed successfully via pip"
          else
            echo "Pip install failed, trying official installer..."
            curl -sSL https://install.python-poetry.org | python3 -
            echo "$HOME/.local/bin" >> $GITHUB_PATH
          fi

          # Verify and configure
          poetry --version
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Install Node dependencies
        run: npm ci

      - name: Install Python dependencies
        run: poetry install --no-interaction

      - name: Start services with Docker Compose
        run: |
          docker compose up -d hardhat

          # Wait for Hardhat to be ready with health check
          echo "Waiting for Hardhat node to be ready..."
          for i in {1..30}; do
            if curl -sf http://localhost:8545 >/dev/null 2>&1; then
              echo "Hardhat node is ready!"
              break
            fi
            echo "Waiting for Hardhat... ($i/30)"
            sleep 2
          done

      - name: Prepare artifacts directory
        run: |
          # Create artifacts directory structure for Hardhat
          mkdir -p artifacts/build-info
          mkdir -p artifacts/contracts
          chmod -R 755 artifacts/

      - name: Deploy contracts
        run: |
          npx hardhat run scripts/deploy.js --network localhost
          # Source the .env file to get the contract address
          source .env
          echo "TICKET_CONTRACT_ADDRESS=$TICKET_CONTRACT_ADDRESS" >> $GITHUB_ENV

      - name: Start API server
        run: |
          poetry run uvicorn src.api.main:app --host 0.0.0.0 --port 8000 &

          # Wait for API to be ready with health check
          echo "Waiting for API server to be ready..."
          for i in {1..30}; do
            if curl -sf http://localhost:8000/api/v1/health >/dev/null 2>&1; then
              echo "API server is ready!"
              break
            fi
            echo "Waiting for API server... ($i/30)"
            sleep 2
          done

      - name: Run integration tests
        run: poetry run pytest tests/integration -v

      - name: Stop services
        if: always()
        run: docker compose down

  # Security scan
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
